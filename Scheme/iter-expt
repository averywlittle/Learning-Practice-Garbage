#lang racket

(define (even? n)
  (= (remainder n 2) 0))

(define (square n)
  (* n n))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (iter-expt b n)
  (define (iter N B A)
    (cond ((= N 0) A)
          ((even? N) (iter (/ N 2) (square B) A))
          (else (iter (- N 1) B (* B A)))))
  (iter n b 1))
    


(fast-expt 2 2)
(fast-expt 4 6)

(iter-expt 2 2)
(iter-expt 4 6)